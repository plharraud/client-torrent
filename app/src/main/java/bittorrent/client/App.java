/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bittorrent.client;

import java.io.File;
import java.io.IOException;

import org.apache.commons.cli.*;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

public class App {

    public boolean DEBUG = false;
    public boolean INFO = false;
    //TODO: lancer app depuis une nouvelle classe main

    public static void main(String[] args) {
        Options cliOptions = new Options();
        cliOptions.addOption("debug", false, "");
        cliOptions.addOption("info", false, "");
        try {

            CommandLineParser cliParser = new DefaultParser();
            CommandLine cliCmd = cliParser.parse(cliOptions, args);
            if (cliCmd.hasOption("debug")) {
                //this.DEBUG = true;
            }
            if (cliCmd.hasOption("info")) {
                
            }
            String[] cliArgs = cliCmd.getArgs();
            
            if (cliArgs.length != 2) {
                throw new CLIException("specify .torrent file and destination directory");
            }

            String torrentFilePath = cliArgs[0];
            String destinationPath = cliArgs[1];

            if (! FilenameUtils.getExtension(torrentFilePath).equals("torrent")) {
                throw new CLIException(torrentFilePath + " is not a .torrent file");
            }

            File torrentFile = new File(torrentFilePath);
            if (! torrentFile.exists()) {
                throw new CLIException(torrentFilePath + " does not exist");
            }

            File destinationFile = new File(destinationPath);
            if (! destinationFile.isDirectory()) {
                throw new CLIException(destinationPath + " does not exist or is not a directory");
            }

            Torrent torrent = new Torrent(torrentFile);
            // Then, we get the tracker's informations
            TrackerConnect tc = new TrackerConnect(torrent);
            TrackerInfo info = tc.getTrackerInfo();
            byte[] selfPeerId = tc.getPeer_id();

            System.out.println("peers:");
            for (int i = 1; i < info.peersList.size(); i++) {
                Peer peer = info.peersList.get(i);
                System.out.println(peer.getIp().toString() +":"+ peer.getPort());
                //TODO multithread et choix des peers
                new Leecher().leech(torrent, selfPeerId, peer);
            }

        } catch (CLIException e) {
            System.err.println(e.getMessage());
            // HelpFormatter cliHelpFormatter = new HelpFormatter();
            // cliHelpFormatter.printHelp(args[0], cliOptions);
            System.exit(1);
        } catch (ParseException e) {
            System.err.println(e);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
